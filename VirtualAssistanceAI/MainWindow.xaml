<Window x:Class="VirtualAssistanceAI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:VirtualAssistanceAI"
        xmlns:helper="clr-namespace:VirtualAssistanceAI.Helpers"
        mc:Ignorable="d" WindowStyle="None" AllowsTransparency="True" 
        Title="MainWindow" Height="620" Width="360" Topmost="true" Background="Transparent"
        ShowInTaskbar="True" Icon="logo.ico" Loaded="Window_Loaded">
    <Window.Resources>
        <!--Message Style-->
        <Style x:Key="MessageStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Margin" Value="10"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <!--our message color will also change on sent and received-->
            <Style.Triggers>
                <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="DontUseLb" TargetType="{x:Type ListBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Height" Value="auto"/>
            <!--<Setter Property="Padding" Value="4,1"/>-->
            <Setter Property="Padding" Value="0"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="Red"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding  BorderBrush}" Background="{TemplateBinding Background}" 
                             BorderThickness="{TemplateBinding BorderThickness}" 
                             Padding="{TemplateBinding Padding}" 
                             SnapsToDevicePixels="True" Margin="10,0,10,0">

                            <!--We need our bubble to show on right when message is sent & on left when message is received-->
                            <Grid>
                                <Grid.Style>
                                    <Style TargetType="{x:Type Grid}">
                                        <Setter Property="HorizontalAlignment" Value="Left"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding MessageStatus}" Value="Received">
                                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>

                                <!--Lets design our Message bubble-->
                                <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200" HorizontalAlignment="Right" Width="Auto"
                                     VerticalAlignment="Top" Margin="0,0,0,20">
                                    <Border.Style>
                                        <!--Since we want our message bubble to be in white color in left and reddish on right-->
                                        <Style TargetType="{x:Type Border}">
                                            <Setter Property="Background" Value="White"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                                                    <Setter Property="Background" Value="#FF0084FF"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>


                                    <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                                    <Grid>
                                        <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
                                    VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                                            <Path.Style>
                                                <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                                                <Style TargetType="{x:Type Path}">
                                                    <Setter Property="Fill" Value="White"/>
                                                    <Setter Property="HorizontalAlignment" Value="Left"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                                                            <Setter Property="Fill" Value="#FF0084FF"/>
                                                            <Setter Property="HorizontalAlignment" Value="Right"/>

                                                            <!--Since we need to flip our Message bubble endpoint from right to left-->
                                                            <Setter Property="RenderTransform">
                                                                <Setter.Value>
                                                                    <ScaleTransform ScaleX="-1"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Path.Style>
                                        </Path>
                                        <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
                                                   Style="{StaticResource MessageStyle}"
                                                   TextWrapping="Wrap"/>
                                    </Grid>
                                </Border>
                            </Grid>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <helper:Message_ItemDataTemplateSelector x:Key="MessageDataTemplateSelector"/>
        
        <DataTemplate x:Key="ListBoxTemplateConversation">
            <!--Lets design our Message bubble-->
            <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                                           Width="Auto"
                                           VerticalAlignment="Top" Margin="0,0,0,20">
                <Border.Style>
                    <!--Since we want our message bubble to be in white color in left and reddish on right-->
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                                <Setter Property="Background" Value="#FF0084FF"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                                <Setter Property="HorizontalAlignment" Value="Right"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                <Grid>
                    <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                        <Path.Style>
                            <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                            <Style TargetType="{x:Type Path}">
                                <Setter Property="Fill" Value="White"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                                        <Setter Property="Fill" Value="#FF0084FF"/>
                                        <Setter Property="HorizontalAlignment" Value="Right"/>

                                        <!--Since we need to flip our Message bubble endpoint from right to left-->
                                        <Setter Property="RenderTransform">
                                            <Setter.Value>
                                                <ScaleTransform ScaleX="-1"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Path.Style>
                    </Path>
                    <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
               Style="{StaticResource MessageStyle}" VerticalAlignment="Center"
               TextWrapping="Wrap"/>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="ListBoxTemplateIsuue">
            <!--Lets design our Message bubble-->
            <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                                           Width="Auto"
                                           VerticalAlignment="Top" Margin="0,0,0,20">
                <Border.Style>
                    <!--Since we want our message bubble to be in white color in left and reddish on right-->
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                    </Style>
                </Border.Style>
                <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
                          Grid.RowSpan="3" VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                        <Path.Style>
                            <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                            <Style TargetType="{x:Type Path}">
                                <Setter Property="Fill" Value="White"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                            </Style>
                        </Path.Style>
                    </Path>
                    <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
               Style="{StaticResource MessageStyle}"
               TextWrapping="Wrap" Padding="2"/>
                    <ListBox x:Name="lbMessageResponse"  Grid.Row="1" ItemsSource="{Binding MessageResponse}"
                              Margin="10,0,10,15" BorderThickness="0"
                             SelectionChanged="lbMessageResponse_SelectionChanged" Tag="{Binding}"/>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="ListBoxTemplateConfirmation">
            <!--Lets design our Message bubble-->
            <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                                   Width="Auto"
                                   VerticalAlignment="Top" Margin="0,0,0,20">
                <Border.Style>
                    <!--Since we want our message bubble to be in white color in left and reddish on right-->
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                    </Style>
                </Border.Style>
                <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
                  Grid.RowSpan="3" VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                        <Path.Style>
                            <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                            <Style TargetType="{x:Type Path}">
                                <Setter Property="Fill" Value="White"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                                        <Setter Property="Fill" Value="#FF0084FF"/>
                                        <Setter Property="HorizontalAlignment" Value="Right"/>

                                        <!--Since we need to flip our Message bubble endpoint from right to left-->
                                        <Setter Property="RenderTransform">
                                            <Setter.Value>
                                                <ScaleTransform ScaleX="-1"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Path.Style>
                    </Path>
                    <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
       Style="{StaticResource MessageStyle}"
       TextWrapping="Wrap" Padding="2"/>
                    <Grid Grid.Row="1" Margin="15,0,15,10"
                          Height="30">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="10"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Button x:Name="btnYes" Content="Yes" Background="Transparent"
                                Margin="0,0" Click="btnYes_Click" Tag="{Binding}"/>
                        <Button x:Name="btnNo"  Grid.Column="2" Content="No" Background="Transparent"
                                Margin="0,0" Click="btnNo_Click" Tag="{Binding}"/>
                    </Grid>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="ListBoxTemplatePasswordManager">
            <!--Lets design our Message bubble-->
            <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                            Width="Auto"
                            VerticalAlignment="Top" Margin="0,0,0,20">
                <Border.Style>
                    <!--Since we want our message bubble to be in white color in left and reddish on right-->
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                    </Style>
                </Border.Style>
                <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
           Grid.RowSpan="3" VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                        <Path.Style>
                            <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                            <Style TargetType="{x:Type Path}">
                                <Setter Property="Fill" Value="White"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                            </Style>
                        </Path.Style>
                    </Path>
                    <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
Style="{StaticResource MessageStyle}"
TextWrapping="Wrap" Padding="2"/>
                    <Grid Grid.Row="1" Margin="15,0,15,10"
                   Height="30">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="10"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Button x:Name="btnGoogle" Content="Google" Background="Transparent"
                         Margin="0,0" Click="btnGoogle_Click" Tag="{Binding}"/>
                        <Button x:Name="btnOther"  Grid.Column="2" Content="Others" Background="Transparent"
                         Margin="0,0" Click="btnOther_Click" Tag="{Binding}"/>
                    </Grid>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="ListBoxTemplateInputConfirmation">
            <!--Lets design our Message bubble-->
            <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                            Width="Auto"
                            VerticalAlignment="Top" Margin="0,0,0,20">
                <Border.Style>
                    <!--Since we want our message bubble to be in white color in left and reddish on right-->
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                    </Style>
                </Border.Style>
                <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
           Grid.RowSpan="3" VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                        <Path.Style>
                            <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                            <Style TargetType="{x:Type Path}">
                                <Setter Property="Fill" Value="White"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                            </Style>
                        </Path.Style>
                    </Path>
                    <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
Style="{StaticResource MessageStyle}"
TextWrapping="Wrap" Padding="2"/>
                    <Grid Grid.Row="1" Margin="15,0,15,10"
                   Height="30">
                        <TextBox x:Name="tbInputBrightness"  FontSize="15" Tag="{Binding}"
                                 PreviewKeyDown="tbInputBrightness_PreviewKeyDown"/>
                    </Grid>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="ListBoxTemplatePowerShellOptimizie">
            <!--Lets design our Message bubble-->
            <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                            Width="Auto"
                            VerticalAlignment="Top" Margin="0,0,0,20">
                <Border.Style>
                    <!--Since we want our message bubble to be in white color in left and reddish on right-->
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                    </Style>
                </Border.Style>
                <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
           Grid.RowSpan="3" VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                        <Path.Style>
                            <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                            <Style TargetType="{x:Type Path}">
                                <Setter Property="Fill" Value="White"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                            </Style>
                        </Path.Style>
                    </Path>
                    <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
Style="{StaticResource MessageStyle}"
TextWrapping="Wrap" Padding="2"/>
                    <Grid Grid.Row="1" Margin="15,0,10,15">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="10"/>
                                <RowDefinition Height="auto"/>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="0" Background="Transparent">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition Height="auto"/>
                                </Grid.RowDefinitions>
                                <TextBlock Text="a. Run a diagnostic to determine the apps that use the most CPU and check for updates."
                                             Style="{StaticResource MessageStyle}"
                                            TextWrapping="Wrap" Margin="10,0"/>
                                <TextBlock Grid.Row="1" Text="Most used apps:"  TextWrapping="Wrap"
                                           HorizontalAlignment="Left" Margin="10,10"/>
                                <ListBox x:Name="lbMostUsedApps" Grid.Row="2" ItemsSource="{Binding MessageResponse}"
                              Margin="10,0,10,15" BorderThickness="0">
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="ListBoxItem">
                                            <Setter Property="Padding" Value="0"/>
                                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                        <Border x:Name="Bd"
                           BorderBrush="{TemplateBinding BorderBrush}"
                           BorderThickness="{TemplateBinding BorderThickness}"
                           Background="{TemplateBinding Background}"
                           Padding="0"
                           SnapsToDevicePixels="true">
                                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                         VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ListBox.ItemContainerStyle>

                                </ListBox>
                                <TextBlock Grid.Row="3" Text="b. Would you like to update:" 
                                           Style="{StaticResource MessageStyle}" HorizontalAlignment="Left"
                                           TextWrapping="Wrap" Margin="10,0"/>
                                <TextBlock Grid.Row="4" Text="1. Just one of the most used apps"  TextWrapping="Wrap" Margin="10,5"/>
                                <TextBlock Grid.Row="5" Text="2. All the most used apps" TextWrapping="Wrap" Margin="10,5"/>
                                <TextBlock Grid.Row="6" Text="3. Update all apps on the device" TextWrapping="Wrap" Margin="10,5"/>
                            </Grid>
                            <TextBlock Grid.Row="2" TextWrapping="Wrap"
                                       Text="Choose the corresponding Alphabet::"
                                        Style="{StaticResource MessageStyle}" Margin="10,10"/>
                            <Grid Grid.Row="3" Margin="15,0,15,10" Height="30">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="10"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="btnOne" Content="a" Background="Transparent"
                                        Margin="0,0" FontWeight="Bold" Click="btnOne_Click"
                                        Tag="{Binding}"/>
                                <Button x:Name="btnTwo"  Grid.Column="2" Content="b" Background="Transparent"
                                        Margin="0,0" FontWeight="Bold" Click="btnTwo_Click" Tag="{Binding}"/>
                            </Grid>
                        </Grid>
                    </Grid>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="ListBoxTemplatePowerShellOptimizieChoice">
            <!--Lets design our Message bubble-->
            <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                            Width="Auto"
                            VerticalAlignment="Top" Margin="0,0,0,20">
                <Border.Style>
                    <!--Since we want our message bubble to be in white color in left and reddish on right-->
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                    </Style>
                </Border.Style>
                <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
           Grid.RowSpan="3" VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                        <Path.Style>
                            <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                            <Style TargetType="{x:Type Path}">
                                <Setter Property="Fill" Value="White"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                            </Style>
                        </Path.Style>
                    </Path>
                    <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
Style="{StaticResource MessageStyle}"
TextWrapping="Wrap" Padding="2"/>
                    <Grid Grid.Row="1" Margin="15,-5,10,15" Background="Transparent">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="10"/>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>
                            <StackPanel Orientation="Vertical">
                                <TextBlock Text="Is the issue with:" Margin="0,0,0,5"/>
                                <TextBlock Text="A. Your computer"/>
                                <TextBlock Text="B. A specific program" Margin="0,6"/>
                                <TextBlock Text="Please select (A or B)::" Margin="0"
                                           Style="{StaticResource MessageStyle}"/>
                            </StackPanel>
                            <Grid Grid.Row="2" Margin="0,0,0,10"
                                                Height="30">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="10"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="btnA" Content="A" Background="Transparent"
                                        Margin="0,0" Click="btnA_Click"  Tag="{Binding}"/>
                                <Button x:Name="btnB"  Grid.Column="2" Content="B" Background="Transparent"
                                        Margin="0,0" Click="btnB_Click"  Tag="{Binding}"/>
                            </Grid>
                        </Grid>
                    </Grid>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="ListBoxTemplatePowerShellYourComputer">
            <!--Lets design our Message bubble-->
            <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                            Width="Auto"
                            VerticalAlignment="Top" Margin="0,0,0,20">
                <Border.Style>
                    <!--Since we want our message bubble to be in white color in left and reddish on right-->
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                    </Style>
                </Border.Style>
                <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
           Grid.RowSpan="3" VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                        <Path.Style>
                            <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                            <Style TargetType="{x:Type Path}">
                                <Setter Property="Fill" Value="White"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                            </Style>
                        </Path.Style>
                    </Path>
                    <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
Style="{StaticResource MessageStyle}"
TextWrapping="Wrap" Padding="2" HorizontalAlignment="Left"/>
                    <Grid Grid.Row="1" Margin="15,-5,10,15" Background="Transparent">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="10"/>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>
                            <StackPanel Orientation="Vertical">
                                <TextBlock Text="Would you like to update:" Margin="0,0,0,5"/>
                                <TextBlock Text="1. Just one of the most CPU-intensive apps"/>
                                <TextBlock Text="2. All the most CPU-intensive apps" Margin="0,6"/>
                                <TextBlock Text="3. Update all apps on the device" Margin="0,0"/>
                                <TextBlock Text="Please select corresponding number (1, 2, or 3)::"
                                           Style="{StaticResource MessageStyle}" Margin="0,5,0,0" TextWrapping="Wrap"/>
                            </StackPanel>
                            <Grid Grid.Row="2" Margin="0,0,0,10"
                                                Height="30">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="10"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="10"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="btnPowerShellYourComp1" Content="1" Background="Transparent"
                                        Margin="0,0" Click="btnPowerShellYourComp1_Click"  Tag="{Binding}"/>
                                <Button x:Name="btnPowerShellYourComp2"  Grid.Column="2" Content="2" Background="Transparent"
                                        Margin="0,0" Click="btnPowerShellYourComp2_Click"  Tag="{Binding}"/>
                                <Button x:Name="btnPowerShellYourComp3"  Grid.Column="4" Content="3" Background="Transparent"
                                        Margin="0,0" Click="btnPowerShellYourComp3_Click"  Tag="{Binding}"/>
                            </Grid>
                        </Grid>
                    </Grid>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="ListBoxTemplateCPUIntensiveApps">
            <!--Lets design our Message bubble-->
            <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                            Width="Auto"
                            VerticalAlignment="Top" Margin="0,0,0,20">
                <Border.Style>
                    <!--Since we want our message bubble to be in white color in left and reddish on right-->
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                    </Style>
                </Border.Style>
                <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
           Grid.RowSpan="3" VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                        <Path.Style>
                            <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                            <Style TargetType="{x:Type Path}">
                                <Setter Property="Fill" Value="White"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                            </Style>
                        </Path.Style>
                    </Path>
                    <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
Style="{StaticResource MessageStyle}"
TextWrapping="Wrap" Padding="2" HorizontalAlignment="Left"/>
                    <Grid Grid.Row="1" Margin="15,-5,10,15" Background="Transparent">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="10"/>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>
                            <StackPanel Orientation="Vertical">
                                <TextBlock Text="Select the app you want to update:" Margin="0,0,0,5"/>
                            </StackPanel>
                            <Grid Grid.Row="2" Margin="0,0,0,10">
                                <ListBox x:Name="lbSelectApps" Grid.Row="2" ItemsSource="{Binding MessageResponse}"
                                         Margin="0,-5,0,0" BorderThickness="0" ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                         SelectionChanged="lbSelectApps_SelectionChanged">
                                </ListBox>
                            </Grid>
                        </Grid>
                    </Grid>
                </Grid>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="ListBoxTemplateWait">
            <!--Lets design our Message bubble-->
            <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                            Width="Auto"
                            VerticalAlignment="Top" Margin="0,0,0,20">
                <Border.Style>
                    <!--Since we want our message bubble to be in white color in left and reddish on right-->
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                    </Style>
                </Border.Style>
                <!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description-->
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
           Grid.RowSpan="3" VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                        <Path.Style>
                            <!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa-->
                            <Style TargetType="{x:Type Path}">
                                <Setter Property="Fill" Value="White"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                            </Style>
                        </Path.Style>
                    </Path>
                    <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
                               TextWrapping="Wrap" Padding="0" VerticalAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource MessageStyle}">
                                <Style.Triggers>
                                    <Trigger Property="Visibility" Value="Visible">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Text" Duration="00:00:00.8" RepeatBehavior="Forever">
                                                        <DiscreteObjectKeyFrame KeyTime="00:00:00.0" Value="Please Wait."/>
                                                        <DiscreteObjectKeyFrame KeyTime="00:00:00.2" Value="Please Wait.."/>
                                                        <DiscreteObjectKeyFrame KeyTime="00:00:00.4" Value="Please Wait..."/>
                                                        <DiscreteObjectKeyFrame KeyTime="00:00:00.6" Value="Please Wait...."/>
                                                    </ObjectAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Grid>
            </Border>
        </DataTemplate>

        <Style TargetType="{x:Type TextBox}" x:Key="TextBoxStyle">
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Background" Value="{DynamicResource MainThemeControlBackgroundColor}" />
            <Setter Property="BorderBrush" Value="White" />
            <Setter Property="Foreground"
            Value="White" />
            <Setter Property="MinHeight" Value="36" />
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="10,0,0,0"/>
            <Setter Property="FontSize"
            Value="16" />
            <Setter Property="FontWeight" Value="Regular"/>
            <Setter Property="CaretBrush" Value="White"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="mainBorder" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="10">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" />
                                <Grid Margin="10,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Path Data="M20.5 6C12.509634 6 6 12.50964 6 20.5C6 28.49036 12.509634 35 20.5 35C23.956359 35 27.133709 33.779044 29.628906 31.75L39.439453 41.560547 A 1.50015 1.50015 0 1 0 41.560547 39.439453L31.75 29.628906C33.779044 27.133709 35 23.956357 35 20.5C35 12.50964 28.490366 6 20.5 6 z M 20.5 9C26.869047 9 32 14.130957 32 20.5C32 23.602612 30.776198 26.405717 28.791016 28.470703 A 1.50015 1.50015 0 0 0 28.470703 28.791016C26.405717 30.776199 23.602614 32 20.5 32C14.130953 32 9 26.869043 9 20.5C9 14.130957 14.130953 9 20.5 9 z"
                                          Stretch="Uniform" Fill="white"
                                          Height="23" Width="23"
                                          Visibility="{Binding ElementName=UserMessage,Path=Visibility}"/>
                                    <TextBlock Grid.Column="1"
VerticalAlignment="Center"
Text="{Binding Tag, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
Margin="10,0,5,0" 
Foreground="White"
IsHitTestVisible="False"
x:Name="UserMessage"
FontWeight="{TemplateBinding FontWeight}"
Visibility="Hidden"/>
                                </Grid>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Text" Value=""/>
                                    <Condition Property="IsKeyboardFocusWithin" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Visibility" TargetName="UserMessage" Value="Visible"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="mainBorder"  Property="Opacity" Value="0.1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DrawingImage x:Key="print_30pxDrawingImage">
            <DrawingImage.Drawing>
                <DrawingGroup ClipGeometry="M0,0 V30 H30 V0 H0 Z">
                    <GeometryDrawing Brush="#FFB0C1D4" Geometry="F1 M30,30z M0,0z M3,23.5C2.2,23.5,1.5,22.8,1.5,22L1.5,10C1.5,9.2,2.2,8.5,3,8.5L5.5,8.5 5.5,6.5 24.5,6.5 24.5,8.5 27,8.5C27.8,8.5,28.5,9.2,28.5,10L28.5,22C28.5,22.8,27.8,23.5,27,23.5L3,23.5z" />
                    <GeometryDrawing Brush="#FF66798F" Geometry="F1 M30,30z M0,0z M24,7L24,8 24,9 25,9 27,9C27.6,9,28,9.4,28,10L28,22C28,22.6,27.6,23,27,23L3,23C2.4,23,2,22.6,2,22L2,10C2,9.4,2.4,9,3,9L5,9 6,9 6,8 6,7 24,7 M25,6L5,6 5,8 3,8C1.9,8,1,8.9,1,10L1,22C1,23.1,1.9,24,3,24L27,24C28.1,24,29,23.1,29,22L29,10C29,8.9,28.1,8,27,8L25,8 25,6 25,6z" />
                    <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M30,30z M0,0z M6.5,1.5L23.5,1.5 23.5,8.5 6.5,8.5z" />
                    <GeometryDrawing Brush="#FF788B9C" Geometry="F1 M30,30z M0,0z M23,2L23,8 7,8 7,2 23,2 M24,1L6,1 6,9 24,9 24,1 24,1z" />
                    <GeometryDrawing Brush="#FF8BB7F0" Geometry="F1 M30,30z M0,0z M8,15.5C7.2,15.5,6.5,14.8,6.5,14L6.5,8.5 23.5,8.5 23.5,14C23.5,14.8,22.8,15.5,22,15.5L8,15.5z" />
                    <GeometryDrawing Brush="#FF4E7AB5" Geometry="F1 M30,30z M0,0z M23,9L23,14C23,14.6,22.6,15,22,15L8,15C7.4,15,7,14.6,7,14L7,9 23,9 M24,8L6,8 6,14C6,15.1,6.9,16,8,16L22,16C23.1,16,24,15.1,24,14L24,8 24,8z" />
                    <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M30,30z M0,0z M6.5,19.5L23.5,19.5 23.5,28.5 6.5,28.5z" />
                    <GeometryDrawing Brush="#FF788B9C" Geometry="F1 M30,30z M0,0z M23,20L23,28 7,28 7,20 23,20 M24,19L6,19 6,29 24,29 24,19 24,19z" />
                    <GeometryDrawing Brush="#FFD6E3ED" Geometry="F1 M30,30z M0,0z M7,20L23,20 23,23 7,23z" />
                    <GeometryDrawing Brush="#FF788B9C" Geometry="F1 M30,30z M0,0z M10,22L20,22 20,23 10,23z M10,25L20,25 20,26 10,26z" />
                    <DrawingGroup Opacity="1">
                        <GeometryDrawing Brush="#FFFFEEA3" Geometry="F1 M30,30z M0,0z M26,11A1,1,0,1,0,26,13A1,1,0,1,0,26,11z" />
                    </DrawingGroup>
                    <GeometryDrawing Brush="#FF66798F" Geometry="F1 M30,30z M0,0z M6,22L6,20 24,20 24,22 24.5,22C25.3,22,26,21.3,26,20.5L26,20.5C26,19.7,25.3,19,24.5,19L5.5,19C4.7,19,4,19.7,4,20.5L4,20.5C4,21.3,4.7,22,5.5,22L6,22z" />
                </DrawingGroup>
            </DrawingImage.Drawing>
        </DrawingImage>

        <DrawingImage x:Key="wi_fi_64pxDrawingImage">
            <DrawingImage.Drawing>
                <DrawingGroup ClipGeometry="M0,0 V64 H64 V0 H0 Z">
                    <GeometryDrawing Geometry="F1 M64,64z M0,0z M32.302,13C22.496,13,13.484,17.486,7.573,25.308L6.97,26.106 13.355,30.931 13.959,30.134C18.35,24.329 25.035,21 32.302,21 39.234,21 45.637,24.03 50.024,29.349L46.828,31.764C43.219,27.452 37.979,25 32.302,25 26.289,25 20.767,27.751 17.153,32.549L16.552,33.346 22.915,38.16 23.519,37.363C25.62,34.591 28.821,33 32.302,33 35.434,33 38.34,34.288 40.422,36.567L36.931,39.037C35.665,37.779 33.922,37 32,37 28.141,37 25,40.141 25,44 25,47.859 28.141,51 32,51 35.859,51 39,47.859 39,44 39,42.781 38.685,41.635 38.135,40.635L43.303,36.979 42.679,36.155C40.195,32.879 36.413,31 32.302,31 28.526,31 25.027,32.585 22.558,35.382L19.373,32.973C22.6,29.164 27.257,27 32.302,27 37.682,27 42.62,29.461 45.853,33.752L46.456,34.552 52.844,29.725 52.24,28.927C47.467,22.618 40.2,19 32.302,19 24.738,19 17.751,22.319 12.983,28.142L9.786,25.726C15.313,18.896 23.463,15 32.302,15 41.475,15 49.906,19.196 55.434,26.513L57.03,25.308C51.12,17.486,42.107,13,32.302,13z M32,49C29.243,49 27,46.757 27,44 27,41.243 29.243,39 32,39 34.757,39 37,41.243 37,44 37,46.757 34.757,49 32,49z">
                        <GeometryDrawing.Brush>
                            <LinearGradientBrush StartPoint="32,11.5" EndPoint="32,51.226" MappingMode="Absolute" SpreadMethod="Reflect" Opacity="1">
                                <GradientStop Color="#FF1A6DFF" Offset="0" />
                                <GradientStop Color="#FFC822FF" Offset="1" />
                            </LinearGradientBrush>
                        </GeometryDrawing.Brush>
                    </GeometryDrawing>
                    <GeometryDrawing Geometry="F1 M64,64z M0,0z M32,41A3,3,0,1,0,32,47A3,3,0,1,0,32,41z">
                        <GeometryDrawing.Brush>
                            <LinearGradientBrush StartPoint="32,40.5" EndPoint="32,47.607" MappingMode="Absolute" SpreadMethod="Reflect" Opacity="1">
                                <GradientStop Color="#FF6DC7FF" Offset="0" />
                                <GradientStop Color="#FFE6ABFF" Offset="1" />
                            </LinearGradientBrush>
                        </GeometryDrawing.Brush>
                    </GeometryDrawing>
                </DrawingGroup>
            </DrawingImage.Drawing>
        </DrawingImage>

        <DrawingImage x:Key="sound_50pxDrawingImage">
            <DrawingImage.Drawing>
                <DrawingGroup ClipGeometry="M0,0 V50 H50 V0 H0 Z">
                    <GeometryDrawing Brush="Red" Geometry="F1 M50,50z M0,0z M26.609375,2C25.945313,2,25.304688,2.28125,24.855469,2.765625L12,16 12,34 24.855469,47.234375C25.304688,47.722656 25.945313,48 26.609375,48 27.925781,48 29,46.925781 29,45.609375L29,4.390625C29,3.074219,27.925781,2,26.609375,2z M39.695313,10.421875L38.574219,12.074219C43.007813,14.679688 46,19.492188 46,25 46,30.507813 43.007813,35.320313 38.574219,37.925781L39.695313,39.578125C44.660156,36.609375 48,31.195313 48,25 48,18.804688 44.660156,13.390625 39.695313,10.421875z M36.324219,15.378906L35.191406,17.042969C38.046875,18.554688 40,21.550781 40,25 40,28.449219 38.046875,31.445313 35.191406,32.957031L36.324219,34.621094C39.707031,32.738281 42,29.136719 42,25 42,20.863281 39.707031,17.261719 36.324219,15.378906z M5,16C3.347656,16,2,17.347656,2,19L2,31C2,32.652344,3.347656,34,5,34L10,34 10,16z M32.921875,20.386719L31.753906,22.109375C33.042969,22.445313 34,23.605469 34,25 34,26.394531 33.042969,27.554688 31.753906,27.890625L32.921875,29.613281C34.726563,28.855469 36,27.074219 36,25 36,22.925781 34.726563,21.140625 32.921875,20.386719z" />
                </DrawingGroup>
            </DrawingImage.Drawing>
        </DrawingImage>

        <DrawingImage x:Key="password_48pxDrawingImage">
            <DrawingImage.Drawing>
                <DrawingGroup ClipGeometry="M0,0 V48 H48 V0 H0 Z">
                    <GeometryDrawing Brush="#FF424242" Geometry="F1 M48,48z M0,0z M24,4C18.486,4,14,8.486,14,14L14,18 18,18 18,14C18,10.691 20.691,8 24,8 27.309,8 30,10.691 30,14L30,18 34,18 34,14C34,8.486,29.514,4,24,4" />
                    <GeometryDrawing Brush="#FF8BC34A" Geometry="F1 M48,48z M0,0z M37,44L11,44C8.791,44,7,42.209,7,40L7,22C7,19.791,8.791,18,11,18L37,18C39.209,18,41,19.791,41,22L41,40C41,42.209,39.209,44,37,44" />
                    <GeometryDrawing Brush="#FFF1F8E9" Geometry="F1 M48,48z M0,0z M17,31C17,32.657 15.657,34 14,34 12.343,34 11,32.657 11,31 11,29.343 12.343,28 14,28 15.657,28 17,29.343 17,31 M37,31C37,32.657 35.657,34 34,34 32.343,34 31,32.657 31,31 31,29.343 32.343,28 34,28 35.657,28 37,29.343 37,31 M27,31C27,32.657 25.657,34 24,34 22.343,34 21,32.657 21,31 21,29.343 22.343,28 24,28 25.657,28 27,29.343 27,31" />
                </DrawingGroup>
            </DrawingImage.Drawing>
        </DrawingImage>
    </Window.Resources>

    <Border Background="#FFEEEDFF" CornerRadius="60,60,0,0">
        <Grid Background="Transparent" Margin="16,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="35"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid Margin="10,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="30"/>
                </Grid.ColumnDefinitions>
                <Button x:Name="btnMinimize" Cursor="Hand"
                        Click="btnMinimize_Click" Margin="0,0">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Grid Background="Transparent">
                                <Path Data="M3,12L3,12c0-0.552,0.448-1,1-1h16c0.552,0,1,0.448,1,1v0c0,0.552-0.448,1-1,1H4C3.448,13,3,12.552,3,12z"
                                      Stretch="Uniform" Fill="{DynamicResource MainThemeForegroundColor}" Width="15"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Opacity" Value="1"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <TextBlock Grid.Column="1" Text="Your Tech Support Assistant"
           HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{DynamicResource MainThemeForegroundColor}" FontWeight="Bold"/>
                <Button x:Name="btnClose" Grid.Column="2"
                        Click="btnClose_Click" Cursor="Hand">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Grid Background="Transparent">
                                <Path Data="M4.9902344 3.9902344 A 1.0001 1.0001 0 0 0 4.2929688 5.7070312L10.585938 12L4.2929688 18.292969 A 1.0001 1.0001 0 1 0 5.7070312 19.707031L12 13.414062L18.292969 19.707031 A 1.0001 1.0001 0 1 0 19.707031 18.292969L13.414062 12L19.707031 5.7070312 A 1.0001 1.0001 0 0 0 18.980469 3.9902344 A 1.0001 1.0001 0 0 0 18.292969 4.2929688L12 10.585938L5.7070312 4.2929688 A 1.0001 1.0001 0 0 0 4.9902344 3.9902344 z"
                   Stretch="Uniform" Fill="{DynamicResource MainThemeForegroundColor}" Width="13" Height="15"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Opacity" Value="1"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
            </Grid>
            <Border Grid.Row="1" Margin="0,0,0,0" CornerRadius="40,40,0,0">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                        <GradientStop Color="#cdcdf6" Offset="0" />
                        <GradientStop Color="#95baff" Offset="0.09" />
                        <GradientStop Color="#f5f8ff" Offset="1" />
                        <GradientStop Color="#FFD2E1FF" Offset="0.528"/>
                        <!--<GradientStop Color="#bdbefb" Offset="0.6" />
                        <GradientStop Color="#f2f6ff" Offset="0.8" />-->
                    </LinearGradientBrush>
                </Border.Background>
                <Grid Background="Transparent" Margin="0,10,0,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"/>
                        <RowDefinition/>
                        <RowDefinition Height="50"/>
                    </Grid.RowDefinitions>

                    <ToggleButton x:Name="btnScrollUpDown" HorizontalAlignment="Center" VerticalAlignment="Center"
                                    Width="35" Height="30" Click="btnScrollUpDown_Click">
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <Grid Background="Transparent">
                                    <Path x:Name="path" Data="M24.990234 8.9863281 A 1.0001 1.0001 0 0 0 24.292969 9.2929688L15 18.585938L5.7070312 9.2929688 A 1.0001 1.0001 0 0 0 4.9902344 8.9902344 A 1.0001 1.0001 0 0 0 4.2929688 10.707031L14.292969 20.707031 A 1.0001 1.0001 0 0 0 15.707031 20.707031L25.707031 10.707031 A 1.0001 1.0001 0 0 0 24.990234 8.9863281 z"
                                                  Fill="White" Stretch="Uniform"
                                                  Height="18" Width="22"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Opacity" Value="0.5"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="True">
                                        <Setter Property="Data" TargetName="path" Value="M14.984375 9 A 1.0001 1.0001 0 0 0 14.292969 9.2929688L4.2929688 19.292969 A 1.0001 1.0001 0 1 0 5.7070312 20.707031L15 11.414062L24.292969 20.707031 A 1.0001 1.0001 0 1 0 25.707031 19.292969L15.707031 9.2929688 A 1.0001 1.0001 0 0 0 14.984375 9 z"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Opacity" Value="1"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ToggleButton.Template>
                    </ToggleButton>
                    <ScrollViewer x:Name="svMessage" Grid.Row="1" Margin="18,0,0,10" 
                                  ScrollChanged="svMessage_ScrollChanged" FocusVisualStyle="{x:Null}"
                                  PreviewMouseWheel="svMessage_PreviewMouseWheel">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto"/>
                                <RowDefinition Height="auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="1" Margin="10,10" Background="Transparent">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="10"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="10"/>
                                    <RowDefinition/>
                                    <RowDefinition Height="10"/>
                                    <RowDefinition/>
                                    <RowDefinition Height="10"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Grid.Resources>
                                    <Style TargetType="Button">
                                        <Setter Property="Height" Value="70"/>
                                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Button">
                                                    <Border Background="#cbcdf6" CornerRadius="8">
                                                        <Grid Margin="8">
                                                            <Grid>
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="auto"/>
                                                                    <ColumnDefinition Width="5"/>
                                                                    <ColumnDefinition/>
                                                                </Grid.ColumnDefinitions>
                                                                <Image Source="{Binding Tag,RelativeSource={RelativeSource TemplatedParent}}"
                                                                       Stretch="Uniform" Height="35" Width="35"/>
                                                                <TextBlock Grid.Column="2" Text="{TemplateBinding Content}"
                                                                           TextWrapping="Wrap" VerticalAlignment="Center"
                                                                           Margin="5,0"/>
                                                            </Grid>
                                                        </Grid>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Opacity" Value="0.5"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Opacity" Value="1"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Grid.Resources>
                                <Button Content="Nothings Printing" Tag="/icons/printer.png"
                                        Command="{Binding BtnPrinterIssueCommand}"/>
                                <Button Grid.Column="2" Content="Internet Issue" Tag="/icons/wifi.png"
                                        Command="{Binding BtnWifiIssueCommand}"/>
                                <Button Grid.Row="2" Content="Password Help" Tag="/icons/password.png"
                                        Command="{Binding BtnPasswordHelperCommand}"/>
                                <Button Grid.Row="2" Grid.Column="2" Content="There's No sound" Tag="/icons/nosound.png"
                                        Command="{Binding BtnSoundIssueCommand}"/>
                                <Button Grid.Row="4" Content="Add blocker" Command="{Binding AddBlockCommand}" Tag="/icons/addblock.png"/>
                                <Button Grid.Row="4" Grid.Column="2" Content="Set Brightness"
                                        Command="{Binding SetBrightnessCommand}" Tag="/icons/brightness.png"/>
                                <Button Grid.Row="6" Content="Optimize Device Performance" FontSize="10" Tag="/icons/optimize.png"
                                        Command="{Binding PowerShellOptimizeCommand}"/>
                                <Button x:Name="btnAbout" Grid.Row="6" Grid.Column="2" Content="About" Click="btnAbout_Click" Tag="/icons/about.png"/>
                            </Grid>
                            <ListBox x:Name="lbMessage" Grid.Row="2" Background="Transparent" BorderThickness="0,.05,0,0" ItemsSource="{Binding Messages,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                                     ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled" FocusVisualStyle="{x:Null}"
                                     ItemTemplateSelector="{DynamicResource MessageDataTemplateSelector}" >
                                <ListBox.ItemContainerStyle>
                                    <Style TargetType="ListBoxItem">
                                        <Setter Property="Padding" Value="0"/>
                                        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                    <Border x:Name="Bd"
                           BorderBrush="{TemplateBinding BorderBrush}"
                           BorderThickness="{TemplateBinding BorderThickness}"
                           Background="{TemplateBinding Background}"
                           Padding="0"
                           SnapsToDevicePixels="true">
                                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                         VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ListBox.ItemContainerStyle>

                                <!--<ListBox.ItemTemplate>
                                    <DataTemplate>
                                        --><!--Lets design our Message bubble--><!--
                                        <Border CornerRadius="30" Height="Auto" MinHeight="60" MinWidth="200"
                                                Width="Auto"
                                                VerticalAlignment="Top" Margin="0,0,0,20">
                                            <Border.Style>
                                                --><!--Since we want our message bubble to be in white color in left and reddish on right--><!--
                                                <Style TargetType="{x:Type Border}">
                                                    <Setter Property="Background" Value="White"/>
                                                    <Setter Property="HorizontalAlignment" Value="Left"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                                                            <Setter Property="Background" Value="#FF0084FF"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                                                            <Setter Property="HorizontalAlignment" Value="Right"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                            --><!--To that that bubble shape we need to draw path, just copy and paste the data. i will be providing link in the description--><!--
                                            <Grid>
                                                <Path Data="M13,0.1875C5.925781,0.1875 0.1875,5.253906 0.1875,11.5 0.1875,14.675781 1.675781,17.539063 4.0625,19.59375 3.542969,22.601563 0.175781,23.828125 0.40625,24.65625 3.414063,25.902344 9.378906,23.011719 10.28125,22.5625 11.15625,22.730469 12.070313,22.8125 13,22.8125 20.074219,22.8125 25.8125,17.746094 25.8125,11.5 25.8125,5.253906 20.074219,0.1875 13,0.1875z" 
     VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5" Height="54.75" MinHeight="50" Width="58" MinWidth="58" Stretch="Uniform">
                                                    <Path.Style>
                                                        --><!--Since we need to flip our bubble endpoint from right to left and vice versa we will set trigger on horizontal alignment for our path and doing so will also change our path color from red to white and vice versa--><!--
                                                        <Style TargetType="{x:Type Path}">
                                                            <Setter Property="Fill" Value="White"/>
                                                            <Setter Property="HorizontalAlignment" Value="Left"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding MessageStatus}" Value="Sent">
                                                                    <Setter Property="Fill" Value="#FF0084FF"/>
                                                                    <Setter Property="HorizontalAlignment" Value="Right"/>

                                                                    --><!--Since we need to flip our Message bubble endpoint from right to left--><!--
                                                                    <Setter Property="RenderTransform">
                                                                        <Setter.Value>
                                                                            <ScaleTransform ScaleX="-1"/>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Path.Style>
                                                </Path>
                                                <TextBlock Text="{Binding Message,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
                    Style="{StaticResource MessageStyle}"
                    TextWrapping="Wrap"/>
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>-->
                            </ListBox>
                        </Grid>
                    </ScrollViewer>
                    <Grid Grid.Row="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBox x:Name="txtInput" Grid.Row="1" Background="#bdbefb"
                                  Style="{StaticResource TextBoxStyle}" Tag="Type Something..."
                                 PreviewKeyDown="txtInput_PreviewKeyDown" Margin="0,0,0,2"/>
                        <!--<Button  Grid.Column="1" Width="50" Content=">" Background="Transparent" BorderThickness="0"
                                 Command="{Binding BtnSendCommand}" CommandParameter="{Binding ElementName=txtInput,Path=Text}"/>-->
                    </Grid>
                </Grid>
            </Border>
        </Grid>
    </Border>
</Window>


